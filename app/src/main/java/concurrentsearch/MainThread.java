/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package concurrentsearch;

import java.util.ArrayList;
import java.util.Random;

public class MainThread {

    public static void main(String[] args) {
        long startTime = System.nanoTime();
        try {
            int n = Integer.parseInt(args[0]);
            int x = Integer.parseInt(args[1]);
            int p = Integer.parseInt(args[2]);
        

        ArrayList<Integer> values = new ArrayList<>(n);

        for (int i=0; i<n; i++) {
            int random = getRandomNumber(n-1);
            values.add(random);
        }
        
        int threadSize = values.size() / p;

        SearchThread[] threads = new SearchThread[p];

        for (int i=0; i<p; i++) {
            final int start = i * threadSize;
            final int end = (i == p - 1) ? values.size() : (i + 1) * threadSize;
            threads[i] = new SearchThread(values, start, end, x);
            threads[i].start();
        }

        if (values.size() % p != 0 ) {
            final int start = p*threadSize;
            final int end = n;
            SearchThread restThread = new SearchThread(values, start, end, x);
            restThread.start();
            threads[p-1] = restThread;
        }

        for (int i=0; i<p; i++) {
            try {
                threads[i].join();
            }
            catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        int count = 0;
        ArrayList<Integer> indices = new ArrayList<>();
        for (int i=0; i<p; i++) {
            count += threads[i].getCount();
            indices.addAll(threads[i].getIndices());
        }

        System.out.println("Der Wert " + x + " kommt " + count + " mal vor.");
        System.out.println("Indizes: " + indices);

        }
        catch (Exception e) {
            System.err.println("Bitte geben sie nur Werte als Argumente ein die zu Integers konvertiert werden kÃ¶nnen!");
        }
        
        long endTime = System.nanoTime();
        long timeElapsed = endTime - startTime;
        System.out.println("Execution time in milliseconds: " + timeElapsed / 1000000);
    }

    public static int getRandomNumber(int n) {
        Random random = new Random();
        int number = random.nextInt(n);
        return number;
    }
}
